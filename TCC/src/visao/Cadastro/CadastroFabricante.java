/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao.Cadastro;

import Componentes.Componentes;
import controller.Cadastro.FabricanteController;
import controller.Mensagens;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import modelo.Fabricante;
import persistencia.exceptions.NonexistentEntityException;
import util.ValidaCNPJ;

/**
 *
 * @author Bruno
 */
public class CadastroFabricante extends javax.swing.JDialog {

    /**
     * Creates new form CadastroFabricante
     */
    Componentes c = new Componentes();
    JButton jbGravar;
    JButton jbBuscar;
    JButton jbExcluir;
    Mensagens m;
    FabricanteController fabricanteController;
    String cnpj;
    Fabricante f;

    public CadastroFabricante(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        jbGravar = c.criaBotaoGravar();
        jbBuscar = c.criaBotaoBuscar();
        jbExcluir = c.criaBotaoExcluir();

        jbGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGravarActionPerformed(evt);
            }
        });

        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jpControles.add(jbBuscar);
        jpControles.add(jbExcluir);
        jpControles.add(jbGravar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jtfFabricanteNome = new javax.swing.JTextField();
        jcbFabricanteCNPJ = new javax.swing.JComboBox();
        jlCodigo = new javax.swing.JLabel();
        jpControles = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Fabricante");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Fabricante"));

        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 13));

        jLabel1.setText("Nome:");
        jPanel2.add(jLabel1);

        jLabel2.setText("CNPJ:");
        jPanel2.add(jLabel2);

        jLabel3.setText("Código:");
        jPanel2.add(jLabel3);

        jPanel3.setLayout(new java.awt.GridLayout(3, 1, 0, 5));
        jPanel3.add(jtfFabricanteNome);

        jcbFabricanteCNPJ.setEditable(true);
        jcbFabricanteCNPJ.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFabricanteCNPJItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbFabricanteCNPJ);
        jPanel3.add(jlCodigo);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jpControles.setLayout(new java.awt.GridLayout(1, 3, 3, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpControles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-416)/2, (screenSize.height-185)/2, 416, 185);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbFabricanteCNPJItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFabricanteCNPJItemStateChanged
        try {
            Fabricante f = (Fabricante) jcbFabricanteCNPJ.getSelectedItem();
            if (null != f) {
                jtfFabricanteNome.setText(f.getFabricanteNome());
                jlCodigo.setText(f.getFabricanteId()+"");
            }
        } catch (ClassCastException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jcbFabricanteCNPJItemStateChanged

    private void jbGravarActionPerformed(java.awt.event.ActionEvent evt) {
        acaoGravar();
    }

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {
        m = new Mensagens();
        if (f != null) {
            if (f.getFabricanteId() != 0) {
                if (m.jopDeletar("Deseja realmente excluir este fucionário ?") == JOptionPane.YES_OPTION) {
                    acaoRemover();
                }
            } else {
                m.jopAlerta("Para excluir registro, é nescessário efetuar uma busca.");
            }
        } else {
            m.jopAlerta("Para excluir registro, é nescessário efetuar uma busca.");
        }
    }

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {
        acaoBuscar();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroFabricante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroFabricante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroFabricante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroFabricante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CadastroFabricante dialog = new CadastroFabricante(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox jcbFabricanteCNPJ;
    private javax.swing.JLabel jlCodigo;
    private javax.swing.JPanel jpControles;
    private javax.swing.JTextField jtfFabricanteNome;
    // End of variables declaration//GEN-END:variables

    private void acaoGravar() {
        m = new Mensagens();
        if (null != jcbFabricanteCNPJ.getSelectedItem() && !jtfFabricanteNome.getText().equals("")) {
            String cnpj = jcbFabricanteCNPJ.getSelectedItem().toString();
            ValidaCNPJ validador = new ValidaCNPJ();
            if (validador.isCNPJ(cnpj)) {
                Fabricante fabricante = new Fabricante();
                fabricante.setFabricanteCNPJ(cnpj);
                fabricante.setFabricanteNome(jtfFabricanteNome.getText());
                fabricanteController = new FabricanteController();
                if (fabricanteController.gravar(fabricante) != null) {
                    m.jopAviso("Gravado com sucesso!");
                    acaoBuscar();
                }
            } else {
                m.jopAviso("CNPJ inválido.");
            }
        } else {
            m.jopAlerta("Todos os campos são obrigatórios.");
        }
    }

    private void limparTela() {
        jtfFabricanteNome.setText("");
        jcbFabricanteCNPJ.removeAll();
    }

    private boolean acaoBuscar() {
        try {
            if (jcbFabricanteCNPJ.getSelectedItem() != null) {
                if (!jcbFabricanteCNPJ.getSelectedItem().toString().equals("")) {


                    fabricanteController = new FabricanteController();
                    String s = jcbFabricanteCNPJ.getSelectedItem().toString();
                    DefaultComboBoxModel dcbm = fabricanteController.buscar("fabricanteCNPJ", s);

                    if (dcbm != null) {
                        jcbFabricanteCNPJ.setModel(dcbm);

                        if (jcbFabricanteCNPJ.getItemCount() >= 1) {
                            jcbFabricanteCNPJ.setSelectedIndex(-1);
                            jcbFabricanteCNPJ.setSelectedIndex(0);
                            f = (Fabricante) jcbFabricanteCNPJ.getSelectedItem();
                            return true;
                        } else {
                            m = new Mensagens();
                            m.jopAviso("Nenhum fabricante encontrado.");
                            return false;
                        }
                    } else {
                        m = new Mensagens();
                        m.jopAviso("Nenhum fabricante encontrado.");
                        return false;
                    }
                } else if (!jtfFabricanteNome.getText().equals("")) {
                    fabricanteController = new FabricanteController();

                    DefaultComboBoxModel dcbm = fabricanteController.buscar("fabricanteNome", jtfFabricanteNome.getText());

                    if (dcbm != null) {
                        jcbFabricanteCNPJ.setModel(dcbm);

                        if (jcbFabricanteCNPJ.getItemCount() >= 1) {
                            jcbFabricanteCNPJ.setSelectedIndex(-1);
                            jcbFabricanteCNPJ.setSelectedIndex(0);
                            f = (Fabricante) jcbFabricanteCNPJ.getSelectedItem();
                            return true;
                        } else {
                            m = new Mensagens();
                            m.jopAviso("Nenhum fabricante encontrado.");
                            f = null;
                            fabricanteController = null;
                            return false;
                        }

                    } else {
                        m = new Mensagens();
                        m.jopAviso("É nescessário informar o CNPJ ou o nome do fabricante para efetuar uma busca.");
                        f = null;
                        fabricanteController = null;
                        return false;
                    }
                } else {
                    m = new Mensagens();
                    m.jopAviso("É nescessário informar o CNPJ ou o nome do fabricante para efetuar uma busca.");
                    f = null;
                    fabricanteController = null;
                    return false;
                }
            } else if (!jtfFabricanteNome.getText().equals("")) {
                    fabricanteController = new FabricanteController();

                    DefaultComboBoxModel dcbm = fabricanteController.listByField("fabricanteNome", jtfFabricanteNome.getText());

                    if (dcbm != null) {
                        jcbFabricanteCNPJ.setModel(dcbm);

                        if (jcbFabricanteCNPJ.getItemCount() >= 1) {
                            jcbFabricanteCNPJ.setSelectedIndex(-1);
                            jcbFabricanteCNPJ.setSelectedIndex(0);
                            f = (Fabricante) jcbFabricanteCNPJ.getSelectedItem();
                            return true;
                        } else {
                            m = new Mensagens();
                            m.jopAviso("Nenhum fabricante encontrado.");
                            f = null;
                            fabricanteController = null;
                            return false;
                        }

                    } else {
                        m = new Mensagens();
                        m.jopAviso("É nescessário informar o CNPJ ou o nome do fabricante para efetuar uma busca.");
                        f = null;
                        fabricanteController = null;
                        return false;
                    }
                } else {
                    m = new Mensagens();
                    m.jopAviso("É nescessário informar o CNPJ ou o nome do fabricante para efetuar uma busca.");
                    f = null;
                    fabricanteController = null;
                    return false;
                }
        } catch (Exception ex) {
            Logger.getLogger(CadastroFabricante.class.getName()).log(Level.SEVERE, null, ex + "\n É nescessário informar o CNPJ ou o nome do fabricante para efetuar uma busca.");
            ex.printStackTrace();
            m = new Mensagens();
            m.jopAlerta("É nescessário informar o CNPJ ou o nome do fabricante para efetuar uma busca. \n"+ex);
            return false;
        }
    }

    private void acaoRemover() {
        fabricanteController = new FabricanteController();

        if (f != null) {
            if (f.getFabricanteId() != 0) {
                try {
                    fabricanteController.setDeleted(f);
                    f = null;
                    limparTela();
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(CadastroFabricante.class.getName()).log(Level.SEVERE, null, ex + "\n Este registro não existe mais em sua base de dados.\n");
                    m.jopAlerta("Este registro não existe mais em sua base de dados.");
                } catch (Exception ex) {
                    Logger.getLogger(CadastroFabricante.class.getName()).log(Level.SEVERE, null, "\n" + ex);
                    m.jopAlerta("Para excluir registro, é nescessário efetuar uma busca.");
                }
            } else {
                m.jopAlerta("Para excluir registro, é nescessário efetuar uma busca.");
            }
        } else {
            m.jopAlerta("Para excluir registro, é nescessário efetuar uma busca.");
        }
    }

    

}
